// <auto-generated />
using System;
using MMD.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MMD.Dal.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200516150737_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MMD.Domain.Model.Accelerometer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Ea1")
                        .HasColumnType("float");

                    b.Property<double>("Ea1_3v")
                        .HasColumnType("float");

                    b.Property<double>("Ea2")
                        .HasColumnType("float");

                    b.Property<double>("Ea2_3v")
                        .HasColumnType("float");

                    b.Property<double>("Ed1")
                        .HasColumnType("float");

                    b.Property<double>("Ed1_3v")
                        .HasColumnType("float");

                    b.Property<double>("Ed2")
                        .HasColumnType("float");

                    b.Property<double>("Ed2_3v")
                        .HasColumnType("float");

                    b.Property<string>("PlateId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlateId1");

                    b.ToTable("Accelerometers");
                });

            modelBuilder.Entity("MMD.Domain.Model.AssemblyMms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccelerometerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("ConsignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("GyroscopeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StructureOfSensor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Substrate")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfIc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccelerometerId")
                        .IsUnique()
                        .HasFilter("[AccelerometerId] IS NOT NULL");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("GyroscopeId")
                        .IsUnique()
                        .HasFilter("[GyroscopeId] IS NOT NULL");

                    b.ToTable("AssemblyMms");
                });

            modelBuilder.Entity("MMD.Domain.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MMD.Domain.Model.CalibrationMms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HysteresisShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("HysteresisTransformation")
                        .HasColumnType("float");

                    b.Property<double>("Inaccuracy")
                        .HasColumnType("float");

                    b.Property<int>("MobileTestingMmsId")
                        .HasColumnType("int");

                    b.Property<double>("Nonlinearity")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("СhangeShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("СhangeTransformation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MobileTestingMmsId")
                        .IsUnique();

                    b.ToTable("CalibrationMmses");
                });

            modelBuilder.Entity("MMD.Domain.Model.CalibrationProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HysteresisShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("HysteresisTransformation")
                        .HasColumnType("float");

                    b.Property<double>("Inaccuracy")
                        .HasColumnType("float");

                    b.Property<int>("MobileTestingProductId")
                        .HasColumnType("int");

                    b.Property<double>("Nonlinearity")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("СhangeShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("СhangeTransformation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MobileTestingProductId")
                        .IsUnique();

                    b.ToTable("CalibrationProducts");
                });

            modelBuilder.Entity("MMD.Domain.Model.ConfiguringMms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssemblyMmsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonDefects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ResultConfiguring")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyMmsId")
                        .IsUnique()
                        .HasFilter("[AssemblyMmsId] IS NOT NULL");

                    b.HasIndex("AuthorId");

                    b.ToTable("ConfiguringMmses");
                });

            modelBuilder.Entity("MMD.Domain.Model.ConfiguringProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("MakeProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReasonDefects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ResultConfiguring")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MakeProductId")
                        .IsUnique()
                        .HasFilter("[MakeProductId] IS NOT NULL");

                    b.ToTable("ConfiguringProducts");
                });

            modelBuilder.Entity("MMD.Domain.Model.Consignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Consignments");
                });

            modelBuilder.Entity("MMD.Domain.Model.Gyroscope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DifferentialF")
                        .HasColumnType("float");

                    b.Property<double>("DifferentialFQ")
                        .HasColumnType("float");

                    b.Property<double>("ParameterF1")
                        .HasColumnType("float");

                    b.Property<double>("ParameterF2")
                        .HasColumnType("float");

                    b.Property<double>("ParameterQ")
                        .HasColumnType("float");

                    b.Property<double>("ParameterQ1")
                        .HasColumnType("float");

                    b.Property<double>("ParameterQ2")
                        .HasColumnType("float");

                    b.Property<string>("PlateId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlateId1");

                    b.ToTable("Gyroscopes");
                });

            modelBuilder.Entity("MMD.Domain.Model.MakeProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssemblyMmsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberOfApplication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyMmsId")
                        .IsUnique()
                        .HasFilter("[AssemblyMmsId] IS NOT NULL");

                    b.HasIndex("AuthorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("MakeProducts");
                });

            modelBuilder.Entity("MMD.Domain.Model.MobileTestingMms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ConfiguringMmsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HysteresisShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("HysteresisTransformation")
                        .HasColumnType("float");

                    b.Property<double>("Inaccuracy")
                        .HasColumnType("float");

                    b.Property<double>("Nonlinearity")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("СhangeShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("СhangeTransformation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConfiguringMmsId")
                        .IsUnique();

                    b.ToTable("MobileTestingMmses");
                });

            modelBuilder.Entity("MMD.Domain.Model.MobileTestingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ConfiguringProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("HysteresisShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("HysteresisTransformation")
                        .HasColumnType("float");

                    b.Property<double>("Inaccuracy")
                        .HasColumnType("float");

                    b.Property<double>("Nonlinearity")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("СhangeShiftZero")
                        .HasColumnType("float");

                    b.Property<double>("СhangeTransformation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConfiguringProductId")
                        .IsUnique();

                    b.ToTable("MobileTestingProducts");
                });

            modelBuilder.Entity("MMD.Domain.Model.Plate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Plates");
                });

            modelBuilder.Entity("MMD.Domain.Model.StationaryTestingMms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlanInstability")
                        .HasColumnType("float");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CalibrationMmsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PowerDensity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CalibrationMmsId")
                        .IsUnique();

                    b.ToTable("StationaryTestingMms");
                });

            modelBuilder.Entity("MMD.Domain.Model.StationaryTestingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlanInstability")
                        .HasColumnType("float");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CalibrationProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PowerDensity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CalibrationProductId")
                        .IsUnique();

                    b.ToTable("StationaryTestingProducts");
                });

            modelBuilder.Entity("MMD.Domain.Model.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("MMD.Domain.Model.Accelerometer", b =>
                {
                    b.HasOne("MMD.Domain.Model.Plate", "Plate")
                        .WithMany("Accelerometer")
                        .HasForeignKey("PlateId1");
                });

            modelBuilder.Entity("MMD.Domain.Model.AssemblyMms", b =>
                {
                    b.HasOne("MMD.Domain.Model.Accelerometer", "Accelerometer")
                        .WithOne("AssemblyMms")
                        .HasForeignKey("MMD.Domain.Model.AssemblyMms", "AccelerometerId");

                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("AssemblyMms")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.Consignment", "Consignment")
                        .WithMany("AssemblyMms")
                        .HasForeignKey("ConsignmentId");

                    b.HasOne("MMD.Domain.Model.Gyroscope", "Gyroscope")
                        .WithOne("AssemblyMms")
                        .HasForeignKey("MMD.Domain.Model.AssemblyMms", "GyroscopeId");
                });

            modelBuilder.Entity("MMD.Domain.Model.CalibrationMms", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("CalibrationMms")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.MobileTestingMms", "MobileTestingMms")
                        .WithOne("CalibrationMms")
                        .HasForeignKey("MMD.Domain.Model.CalibrationMms", "MobileTestingMmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.CalibrationProduct", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("CalibrationProduct")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.MobileTestingProduct", "MobileTestingProduct")
                        .WithOne("CalibrationProduct")
                        .HasForeignKey("MMD.Domain.Model.CalibrationProduct", "MobileTestingProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.ConfiguringMms", b =>
                {
                    b.HasOne("MMD.Domain.Model.AssemblyMms", "AssemblyMms")
                        .WithOne("ConfiguringMms")
                        .HasForeignKey("MMD.Domain.Model.ConfiguringMms", "AssemblyMmsId");

                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("ConfiguringMms")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("MMD.Domain.Model.ConfiguringProduct", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("ConfiguringProduct")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.MakeProduct", "MakeProduct")
                        .WithOne("ConfiguringProduct")
                        .HasForeignKey("MMD.Domain.Model.ConfiguringProduct", "MakeProductId");
                });

            modelBuilder.Entity("MMD.Domain.Model.Gyroscope", b =>
                {
                    b.HasOne("MMD.Domain.Model.Plate", "Plate")
                        .WithMany("Gyroscope")
                        .HasForeignKey("PlateId1");
                });

            modelBuilder.Entity("MMD.Domain.Model.MakeProduct", b =>
                {
                    b.HasOne("MMD.Domain.Model.AssemblyMms", "AssemblyMms")
                        .WithOne("MakeProduct")
                        .HasForeignKey("MMD.Domain.Model.MakeProduct", "AssemblyMmsId");

                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("MakeProduct")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.Warehouse", "Warehouse")
                        .WithMany("MakeProduct")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("MMD.Domain.Model.MobileTestingMms", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("MobileTestingMms")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.ConfiguringMms", "ConfiguringMms")
                        .WithOne("MobileTestingMms")
                        .HasForeignKey("MMD.Domain.Model.MobileTestingMms", "ConfiguringMmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.MobileTestingProduct", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("MobileTestingProduct")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.ConfiguringProduct", "ConfiguringProduct")
                        .WithOne("MobileTestingProduct")
                        .HasForeignKey("MMD.Domain.Model.MobileTestingProduct", "ConfiguringProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.StationaryTestingMms", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("StationaryTestingMms")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.CalibrationMms", "CalibrationMms")
                        .WithOne("StationaryTestingMms")
                        .HasForeignKey("MMD.Domain.Model.StationaryTestingMms", "CalibrationMmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.StationaryTestingProduct", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("StationaryTestingProduct")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MMD.Domain.Model.CalibrationProduct", "CalibrationProduct")
                        .WithOne("StationaryTestingProduct")
                        .HasForeignKey("MMD.Domain.Model.StationaryTestingProduct", "CalibrationProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MMD.Domain.Model.Warehouse", b =>
                {
                    b.HasOne("MMD.Domain.Model.Author", "Author")
                        .WithMany("Warehouse")
                        .HasForeignKey("AuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
